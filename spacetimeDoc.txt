# SpaceTime Doc

- Material Complementar

https://efficient-sloth-d85.notion.site/Trilha-Ignite-e2ed19139b544a46984a28b65dcd4aae

- Git projeto Completo

https://github.com/rocketseat-education/nlw-12-spacetime-ignite

- figma

https://www.figma.com/community/file/1240070456276424762

nlw SpaceTime

### Server

- start project
 create package.json

$ npm init -y

- install typeScript
 como dependencia de desenvolvimento
 
$ npm i typescript -D
$ npm i @types/node -D

- para configurar o typescript no nosso projecto vamos rodar o npx 
 npx eh um forma de executar binarios que sao instalados pelas bibliotecas do nosso projeto 

- criando arquivo tsconfig.json
 Que ele possui as configuracoes do TypeScript dentro do nosso projecto
 
$ npx tsc --init 

**tsconfig.json**

l14 "target": "es2016",
change
    "target": "es2020",

+ src/server.ts

- install tsx

$ npm i tsx -D

- create Script

$
"scripts": {
    "dev": "tsx watch src/server.ts"
},

- to run typescript

$ npm run dev

- install fastify

$ npm i fastify

**server.ts**

- maybe install httpie

- install eslint -D

$ npm install eslint -D

- caso queira configurar voce mesmo o seu eslint
$ npm eslint --init

- install eslint da rocketseat

$ npm i @rocketseat/eslint-config -D

+ .eslintrc.json
**.eslintrs.json**

$
{
  "extends": [
    "@rocketseat/eslint-config/node"
  ]
}

- para corrigir todos os arquivos de um projeto que ja estava criado
 criando script
 
**package.json**

$ l8 "lint": "eslint src --ext .ts --fix"

- to run lint for all

$ npm run lint

- install prisma

$ npm i prisma -D

- para abrir o help do prisma

$ npx prisma -h

- criando um banco sqlite

$ npx prisma init --datasource-provider SQLite

- Definir as tabelas do banco de dados

**schema.prisma**

$
model User {
  id   String @id @default(uuid())
  name String
}

- para criar realmente a tabela no banco de dados, precisamos executar um comando
 ele le o arquivo schema.prisma
 e vai detectar automaticamente todas as alteracoes feitas nesse arquivo.
 agora deve-se dar o nome para a migration 
 migration eh um sistema de controle de versao do banco de dados
 eh uma forma de adicionar aos poucos
 criar a estrutura do meu banco de dados aos poucos
 e com o tempo esse banco pode ir mudando
 criar ou retirar colunas, criar ou retirar tabelas
 cada migration eh como se fosse um commit
 uma alteracao feita no banco 

$ npx prisma migrate dev
$ create users table

- pode-se user ferramentes que acesse bancos sql para ver o banco ali dentro
 ou pode-se usar a ferramenta integrada do prisma
 chamada Studio
 
 ele vai abrir no seu navegador
 
$ npx prima studio

- studio prisma
 Criando nosso primeiro usuario

**http://localhost:5555/**

add record
name Diego Fernandes
save

Stop prisma studio

- Acessar o bando de dados de dentro do nosso server da api
 instalando 
 
$ npm i @prisma/client

**server.ts**

### Web

### Nextjs
 
$ npx create-next-app@latest web --use-npm

$ npm run dev

### Components
### Propriedades

+ src/components/Button.tsx

testando

$
const styles = {
  color: '#F00'
}

interface ButtonProps {
  title: string
}

export function Button(props: ButtonProps) {
  return (
    <p style={styles}>
      {props.title}
    </p>
  )
}


### Components
### Propriedades

### Roteamento

- O next tras esse sistema de ter varias paginas de forma pronta
 No Next, tudo que eu colocar dentro do app
 todo o arquivo que tiver o nome page, vai automaticamente virar uma rota da nossa aplicacao 
 
 Se eu criar uma pasta
 
 
 
 + ignite/page.tsx
 
$ 
export default function Ignite() {
	return <h1>Ignite</h1>
}

$ http://localhost:3000/ignite



- Esse arquivo se tornou uma pagina
	O Next automaticamente edintifica a estrutura de paginas, dentro dessa pasta app, como sendo as paginas da minha aplicacao 
	
- Tudo que eu colocar dentro da pasta app, eh automaticamente as paginas da nossa aplicacao 
	Dai podemos criar quantas subpastas quiser
	
	
	
 + ignite/depoimentos/page.tsx
 
$ http://localhost:3000/ignite/depoimentos

$ 
export default function Depos() {
  return <h1>Depoimento</h1>
}



### Tailwind CSS

- Utilit class


Del
-- button.tsx
-- Ignite/page.tsx

**page.tsx**

$
export default function Home() {
  return (
    <div className="text-2xl font-bold uppercase w-20 h-20 bg-red-500 rounded-full m-10">
      Oi
    </div>
  )
}


### ESLint + Prettier Tailwind

Install

$ npm i @rocketseat/eslint-config -D

install plugin

$ npm i prettier-plugin-tailwindcss -D

+ prettier.config.js

$
module.exports = {
  plugins: [
    require('prettier-plugin-tailwindcss')
  ]
}


- eh uma ferramenta para deixar nosso codigo mais bonito


# Mobile

 Configuration
 
https://react-native.rocketseat.dev/

- iniciando projeto

$ npx create-expo-app mobile

$ npm run start

https://react-native.rocketseat.dev/expo-managed/linux

https://react-native.rocketseat.dev/android/linux

https://react-native.rocketseat.dev/virtual-devices/android-emulator


### Executar no celular
$ npx expo start


Para instalá-lo no seu emulador, basta executar o comando npx expo start e escolher qual emulador você deseja executar. Caso o Expo GO não esteja instalado, ele irá solicitar a sua autourização para instalar a versão necessária.


https://react-native.rocketseat.dev/virtual-devices/android-emulator


### executar Android Studio

	Terminal
**/home/krasny/android-studio/bin

$ ./studio.sh

### Tags mobile


$
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Hello World</Text>
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    alignItems: 'center',
    justifyContent: 'center',
  },

  text: {
    color: '#FFF',
    fontWeight: '700',
    fontSize: 48,
  },
});


### Tailwind mobile

	NativeWind
	
https://www.nativewind.dev/

	Configurando
https://www.nativewind.dev/quick-starts/expo

- Dependencies Install

$ npm i nativewind

$ npm i tailwindcss -D

$ npx tailwindcss init

-
2. Setup Tailwind CSS

Run npx tailwindcss init to create a tailwind.config.js file

Add the paths to all of your component files in your tailwind.config.js file. Remember to replace <custom directory> with the actual name of your directory e.g. screens.

// tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./App.{js,jsx,ts,tsx}", "./app/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
}

3. Add the Babel plugin

Modify your babel.config.js

// babel.config.js
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ["babel-preset-expo"],
+   plugins: ["nativewind/babel"],
  };
};

### usando Typescript

https://www.nativewind.dev/getting-started/typescript

**tsconfig.json**
$ 
{
  "compilerOptions": {
    "types": [
      "nativewind/types"
    ]
  },
  "extends": "expo/tsconfig.base"
}


### reload application

- install eslint

$ npm i eslint @rocketseat/eslint-config -D

+ /.eslintrc.json

$ 
{
  "extends": [
    "@rocketseat/eslint-config/react"
  ]
}


- install plugin prettier

$ npm i prettier-plugin-tailwindcss -D

+ prettier.config.js

$
module.exports = {
  plugins: [require('prettier-plugin-tailwindcss')],
}



### Web keep

- Font configure - google fontes
 Utilizamos o next font

 Sua vantagem eh que ele evita um comportamento na web, que chamamos de "Layout Shift"
 Layout Shift eh quando voce abre um site, quando ele carrega uma fonte padrao pra depois carregar a fonte programada 
 
 
- Estrura visual da Home


- Importando cores


- page colun Left and Right

- blur background

- strips

+ src/assets/bg-stars.svg


- Install package icons

$ npm i lucide-react


### mobile keep

$ npm run start

- Iremos usar um package
	 Expo Google Fonts
	 
$ npx expo install @expo-google-fonts/roboto @expo-google-fonts/bai-jamjuree expo-font 

- Uso do css no mobile

 Utilizamos uma biblioteca chamada Yoga 
 
 
 
+ src/assets/assets.d.ts 

$ declare module '*.png'

 arquivos com esse formato significa que dentro desse arquivo, vou ter apenas typeScript, parte de typagem 
 Isso vai fazer que com todo o arquivo que termine com png, eh um arquivo que eu posso importar 
 
 
  
 
- para importar o svg no react-native precisamos de um package

https://docs.expo.dev/ui-programming/using-svgs/

$ npx expo install react-native-svg

https://github.com/kristerkari/react-native-svg-transformer

$ npm i -D react-native-svg-transformer

 Permite importar svg para a aplicacao


- Quando instalamos alguns package no React Native
as vezes precisamos re-startar o ReactNative
 Opcao para limpar o cache 

$ npm run start --clear



### Server keep

- Vamos pensar na estrutura do bando de dados da nossa aplicacao

 Criando novos relacionamentos no banco de dados
 
 **schema.prisma**

- comando para fazer as alteracoes no banco de dados
$ npx prisma migrate dev


- abrindo prisma studio

$ npx prisma studio

$ npx prisma migrate reset

$ npx prisma migrate dev

$ create memories table



- Criando CRUD basico de momorias
 CRUD = create read update delete
 
 Vamos fazer toda a parte de gestao de memorias aqui dentro
 
 
+ src/routes/memories.ts

+ src/lib/prisma.ts


$ npm run dev

$  http localhost:4444/users

$ npx prisma studio

 Vamos criar uma memoria 
 Antes precisamos criar um usuario
 
- biblicoteca Zod
 ela 
$ npm i zod

- mostra no terminal o conteudo em memories
$ http localhost:4444/memories

- Pega o id da memoria desejada
$ http localhost:4444/memories/7547402b-c6f4-4ab6-b0e8-8d0a354c95b9


- Request POST
$ http POST http://localhost:4444/memories content=test coverUrl=https://github.com/lookjota.png isPublic=1 --json

 Ele criou o nosso insert no banco de dados, 
 Criou la dentro a nossa memoria
 
- pegar o id da memoria recem criada
$ http localhost:4444/memories


- PUT atualizando conteudo / content

$ http PUT http://localhost:4444/memories/60769491-7700-4ccb-9e2f-9bc4afcf6256 content=oiii coverUrl=https://github.com/diego3g.png isPublic=1 --json

- DELETE rota test 
 Test ok
$ http DELETE http://localhost:4444/memories/60769491-7700-4ccb-9e2f-9bc4afcf6256

- GET Listando todas as memorias
$ http GET localhost:4444/memories

- install Pluguins Cors
 Cors eh uma tecnica de seguranca que temos no back-end,
para determinar quais rls ou quais enderecos vao poder acessar a nossa api
 Como estamos construindo o front separado do back, precisamos instalar o cors para instruir o nosso back-end em quais front ends / em quais url de front-end o nosso back-end vai poder ser acessado
 
$ npm i @fastify/cors

**server.ts**

### Web keep

### app art excalidraw - desenhar usando as maos
- excalidraw.com

- Protocolo de autentificacao
 OAuth

 Usando o Oauth eu posso logar o usuario na minha aplicacao usando a conta dele de outra aplicacao que no caso eh o github
 
 O user vai poder se autenticar tanto no mobile quando no front-end para usar recursos do nosso back-end 
 
 Vao existir algumas rotas do nosso back-end que o user so vai poder acessar quando estiver autenticado 
 
Como vai funcionar
 1. O user vai clicar no front-end para fazer loguin, 
 2. Sera direcionado para pagina de login do GitHub
 3. Logar no banco de dados do Github
 4. Vai devolver o user para o front-end - redirecionamento 
 5. O Github envia junto, um codigo, esse codigo vem na url, ele eh um ?code=asdj123d7sa e esse codigo eh super importante.
 Ele eh um codigo que podemos trocar ele por um access tolken 
 Access Tolken eh um tolken que permite agente identificar o usuario no Github e buscar informacoes desse usuario como, perfil, email
 6. Com esse codigo em maos, vamos envia-lo para o beck-end, entao o beck-end ira receber esse codigo
 7. vai chamar a API do Github, falando,
 Esse codigo aqui pertence a qual user ?
 e o Github vai devolver um access tolken
 Access tolken eh o que permite identificar o user e fazer chamadas para Github como se fosse aquele user
 8. fazendo o chamado da rota /user do Github e essas info, serao salvar dento do banco de dados do nosso back-end
 9. Mobile, tera o mesmo processo do front-end
 Que eh precisar fazer a requisicao com o Github
 A maior difenca eh que nao iremos redirecionar o user, iremos usar API do react Native WebBrowser, que permite agente abrir o navegador em cima da aplicacao 
 Mas o fluxo eh muito semelhante 
 
 ![](../../../../Pictures/fluxoApp.png)
 
### Fluxo de Autentificacao

- Criar um aplicacao no Github

 + login GitHub
 + settings
 + Developer Settings
 + OAuth Apps
 + New OAuth App
 + 
$ 
Application name:
 Spactime (DEV)
 SpactimeV1 (DEV)
HomePage URL:
 http://localhost:3000
Authorization callback URL:
 http://localhost:3000/api/auth/callback

 + Register application 

- Vai devolver duas informacoes que sao muito importantes 

$
Client ID:
 ************
Client secrets:
 ********


Client ID
27da4754828629edf94a

Client secrets
fb2df464aaaf705030213ab365193c392b70b7ab


- Copiar Client ID 

- criando arquivo para salvar informacoes

 + .env.local
 **.env.local**

$
# Github
NEXT_PUBLIC_GITHUB_CLIENT_ID=27da4754828629edf94a


### Server little keep

 **.env**
 
$
# Database
DATABASE_URL="file:./dev.db"

# Github
GITHUB_CLIENT_ID="27da4754828629edf94a"
GITHUB_CLIENT_SECRET="fb2df464aaaf705030213ab365193c392b70b7ab" 


### Web keep

 **page.tsx**
$

 + src/components/Copyright.tsx
 + src/components/Hero.tsx
 + src/components/Signin.tsx
 + src/components/EmptyMemories.tsx
 
### Server keep

 **server.ts**

 + src/routes/auth.ts
 
- install axios, melhor forma de fazer
 Requisicoes HTTP
 
 $ npm i axios
 
- install dotenv
 
 $ npm i dotenv

 **Terminal**
$ 
 http POST localhost:4444/register code=0e1c83c0ef78e41dd4f0 --json


 **auth.ts**
 
- testando fazendo autentificacao do usuario
 **terminal**
$ 
 http POST localhost:4444/register code=cd19acc4296fb9e21ebe --json

- tanto se eu rodar prisma studio

 $ npx prisma studio
 

### Criacao de token JWT

- O problema eh que nessa rota de cadastro do usuario
 Conseguimos garantir que o user eh ele mesmo, pq aqui dentro eu tenho access_token do github
 Esse access_token me permite fazer novas requisicoes inclusive no github, caso eu precise
 
 - So que tem um problema, esse eccess_token ele expira, ele tem um tempo de expiracao ate que rapido.
 Menos de 1 dia o access_token ja expira.
 Nao posso depender dessa informacao para garantir que o usuario ele continua logado na nossa aplicacao 
 
 Entao vou o que eu vou precisar fazer aqui no back-end, 
 Vou precisar trabalhar com algo que chamamos no contexto de autentificacao, de JWT
 
 JWT - JSON Web Token
 
 Eh basicamente um Token criado pelo nosso back-end, enviado pro front-end, 
 Pro front-end usar este token nas requisicoes que ele faz pro back-end pra gente identificar um usuario logado
 
ou seja
 
 Quando fizemos esse processo de cadastro do usuario, agente vai criar tambem pro front-end um JWT
 
 Eh um Token que o front-end vai poder usar, por quando tempo agente decidir, que o usuario vai ficar logado
 
 O front-end vai guardar essa informacao la
 
  nos cookies ou na memoria
 
 E toda vez que o front-end fizer uma requisicao pro back-end, ele vai enviar esse token junto e o back-end vai saber que esse token, pertence a tal user
 
ou seja

 Identificar esse user nas proximas requisicoes
 

- Install package fastify/jwt

$ npm i @fastify/jwt
 
 **sever.ts**
- Esse secret
 Eh super importante,
 ele eh uma maneira de diferenciar os Tokens gerados
 os JWT gerados por este back-end de outros JWTs gerados por outros beck-ends
 
 Eh como se fosse uma forma de criptografia do Token
 
ou seja

 O Token vai ser assinado com esta palavra que eu colocar aqui dentro 

$ 
app.register(jwt, {
  secret: 'spacetime',
})

 **auth.ts**
 
$
 const token = app.jwt.sign({
 
 }, {})
 
- Daqui de dentro eu vou passar pra ele dois objetos 
 O primeiro objeto eh, quais informacoes do usuario que eu quero que estejao contidas dentro do Token,
 Aqui eh importante, pq eu so vou colocar informacoes dentro do Token, que sao publicas, 
 Que nao sao sensiveis
 Nao sera colocado senha ou informacoes importantes
 
 Pq o Token nao eh criptografado, apenas assinado
 
ou seja

 Qualquer pessoa consegue ver as informacoes que estao contidas dentro dele 
 
 A informacoes colocadas dentro do Token sao informacoes que eu quero deixar visiveis na minha aplicacao
 Coloca esses dados que tu quer que seja publico do usuario no Toke
 
 + nome do user
 + avatar_utl

 Outra coisa que eh importante que nesse segundo objeto de configuracao eu passar 2 info
 
$
    const token = app.jwt.sign({
      name: user.name,
      avatarUrl: user.avatartUrl,
    }, {
      sub: user.id,
      expiresIn: '30 days',
    })
 
- sub eh a qual usuario pertence esse Token
 Agente coloca uma informacao que seja unica nesse usuario, como o ID
 Outra info eh o expireIn
 
- expireIn eh quanto tempo esse Token vai durar, podemos colocar por 30 days


- fazendo novo teste a requisicao

 **Terminal**
$
 http POST localhost:4444/register code=2a0708db1d87184f55d8 --json
 
- O Token foi gerado com sucesso!


- jwt.io para ver como funciona o jwt por dentro
 
 Pegando o token gerado do user voce jogar sem as aspas dentro do site e ele mostra todas as informacoes disponiveis dentro do token
 

 **memories.ts**
- jwtVerify() 
 O que essa funcao faz, ela garante que na requisicao que o front-end ta fazendo para essa rota aqui, esta vindo do token de autentificacao dele,
 Se o token nao esta vindo, ela bloqueia, ela nao deixa o restante do codigo proceguir
$
  app.get('/memories', async (request) => {
    await request.jwtVerify()

- Testando requisicoes

 httpie
 **Terminal**
$ http -A bearer -a eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiSm9hbyBDYXJsb3MgTGlzYm9hIiwiYXZhdGFyVXJsIjoiaHR0cHM6Ly9hdmF0YXJzLmdpdGh1YnVzZXJjb250ZW50LmNvbS91Lzc3NzUwOTYwP3Y9NCIsInN1YiI6IjIyOGVkZDQ1LWMzNGItNGMzNy05MDExLWI4ODY1YjY1YmQ0ZiIsImlhdCI6MTY5MDUxNTEzNCwiZXhwIjoxNjkzMTA3MTM0fQ.pLQJGMKVP-K8x0LfRQRoSGcWnr8xIX5mA3TwLH2DU30 localhost:4444/memories



### Web keep

+ app/api/auth/callback/route.ts


- install package Axios
$ npm i axios


+ src/lib/api.ts


+ src/components/Profile.tsx


- Install package jwt-decode
$ npm i jwt-decode


+ src/lib/auth.ts

https://app.rocketseat.com.br/plus/lesson/aula-03-integrando-ui-com-bibliotecas-trilha-ignite

-33:26 time to return



### Mobile keep

- Vamos trabalhar com um package do expo chamado 
 Expo AuthSession
 Eh a maneira mais facil de adiconar web browser based authentication
 
  + OAuth flows
 
- search google
$ expo auth session

https://docs.expo.dev/versions/latest/sdk/auth-session/?utm_source=google&utm_medium=cpc&utm_content=performancemax&gclid=Cj0KCQjw2qKmBhCfARIsAFy8buL3mKcf5KVDGYCqXQwOJ9-85VFfQXZ6BkbuXzhHV8LWJpUtg90lcvYaAhBSEALw_wcB

- Terminal
$ npx expo install expo-auth-session expo-crypto

**app.json**
$

l5 "scheme": "nlwspacetime",

- go to authentication guide

https://docs.expo.dev/guides/authentication/#github


Client ID
66a50407cb6aa6bb59cf


- terminal - depois de fazer muitas alteracoes
$ npx expo start --clear